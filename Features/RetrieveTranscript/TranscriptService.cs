using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.Net.Http.Headers;
using System.Text;
using Google.Apis.Util;
using System.Text.RegularExpressions;
using VideoScripts.Features.RetrieveTranscript.Models;

namespace VideoScripts.Features.RetrieveTranscript;

public class TranscriptService
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<TranscriptService> _logger;
    private readonly string _tokenId;

    public TranscriptService(
        IConfiguration configuration,
        ILogger<TranscriptService> logger)
    {
        if (configuration == null)
            throw new ArgumentNullException(nameof(configuration));

        _logger = logger ?? throw new ArgumentNullException(nameof(logger));

        _tokenId = configuration["Apify:TokenId"]
            ?? throw new InvalidOperationException("Apify:TokenId configuration is missing");

        _httpClient = new HttpClient();
        _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _tokenId);
    }

    public async Task<TranscriptResult> ScrapeVideoAsync(string videoUrl)
    {
        try
        {
            _logger.LogInformation($"Scraping YouTube video: {videoUrl}");

            // Prepare the request payload
            var requestPayload = new
            {
                downloadSubtitles = true,
                preferAutoGeneratedSubtitles = true,
                subtitlesLanguage = "en",
                startUrls = new[]
                {
                new
                {
                    url = videoUrl,
                    method = "GET"
                }
            }
            };

            var content = new StringContent(
                JsonConvert.SerializeObject(requestPayload),
                Encoding.UTF8,
                "application/json");

            var runRequest = new HttpRequestMessage(HttpMethod.Post, "https://api.apify.com/v2/acts/streamers~youtube-scraper/runs");
            runRequest.Content = content;

            var runResponse = await _httpClient.SendAsync(runRequest);
            _logger.LogInformation($"Initial Apify response: {runResponse.StatusCode}");

            if (!runResponse.IsSuccessStatusCode)
            {
                _logger.LogWarning($"Failed to start scraping job: {runResponse.StatusCode}");
                return null;
            }

            // Get the run ID from the response
            var runResponseContent = await runResponse.Content.ReadAsStringAsync();
            _logger.LogInformation($"Run response: {runResponseContent}");

            var runData = JsonConvert.DeserializeObject<ApifyRunResponse>(runResponseContent);

            if (runData?.Data?.Id == null)
            {
                _logger.LogWarning("Failed to get run ID from Apify response");
                return null;
            }

            string runId = runData.Data.Id;
            _logger.LogInformation($"Started Apify run with ID: {runId}");

            // Poll for the run status
            return await WaitForRunCompletion(runId, videoUrl);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error scraping YouTube video {videoUrl}: {ex.Message}");
            throw;
        }
    }

    private async Task<TranscriptResult> WaitForRunCompletion(string runId, string videoUrl)
    {
        const int maxAttempts = 30;
        const int delaySeconds = 5; // Completion tests - 8 to 20 seconds

        for (int attempt = 0; attempt < maxAttempts; attempt++)
        {
            try
            {
                // Check the run status
                var statusUrl = $"https://api.apify.com/v2/actor-runs/{runId}";
                var statusResponse = await _httpClient.GetAsync(statusUrl);

                if (!statusResponse.IsSuccessStatusCode)
                {
                    _logger.LogWarning($"Failed to get run status: {statusResponse.StatusCode}");
                    await Task.Delay(TimeSpan.FromSeconds(delaySeconds));
                    continue;
                }

                var statusContent = await statusResponse.Content.ReadAsStringAsync();
                var statusData = JsonConvert.DeserializeObject<ApifyRunStatusResponse>(statusContent);

                _logger.LogInformation($"Run status: {statusData?.Data?.Status}, Attempt: {attempt + 1}/{maxAttempts}");

                if (statusData?.Data?.Status == "SUCCEEDED")
                {
                    // Run completed successfully, get the dataset items
                    return await GetRunResults(runId, videoUrl);
                }
                else if (statusData?.Data?.Status == "FAILED" || statusData?.Data?.Status == "ABORTED")
                {
                    _logger.LogWarning($"Apify run failed with status: {statusData?.Data?.Status}");
                    return null;
                }

                // Still running, wait and try again
                await Task.Delay(TimeSpan.FromSeconds(delaySeconds));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error checking run status: {ex.Message}");
                await Task.Delay(TimeSpan.FromSeconds(delaySeconds));
            }
        }

        _logger.LogWarning($"Timed out waiting for Apify run to complete after {maxAttempts} attempts");
        return null;
    }

    private async Task<TranscriptResult> GetRunResults(string runId, string videoUrl)
    {
        try
        {
            // Get dataset items
            var datasetUrl = $"https://api.apify.com/v2/actor-runs/{runId}/dataset/items";
            var datasetResponse = await _httpClient.GetAsync(datasetUrl);

            if (!datasetResponse.IsSuccessStatusCode)
            {
                _logger.LogWarning($"Failed to get dataset items: {datasetResponse.StatusCode}");
                return null;
            }

            var responseContent = await datasetResponse.Content.ReadAsStringAsync();
            var scraperResponse = JsonConvert.DeserializeObject<List<ApifyScraperResponse>>(responseContent);

            if (scraperResponse == null || !scraperResponse.Any())
            {
                _logger.LogWarning($"No data returned from Apify for video URL: {videoUrl}");
                return null;
            }

            var videoData = scraperResponse[0];

            // Map the response to our domain model (same as before)
            var result = new TranscriptResult
            {
                VideoId = videoData.Id,
                Title = videoData.Title,
                ChannelId = videoData.ChannelId,
                ChannelName = videoData.ChannelName,
                ChannelUrl = videoData.ChannelUrl,
                SubscriberCount = videoData.NumberOfSubscribers,
                ViewCount = videoData.ViewCount,
                LikeCount = videoData.Likes,
                CommentCount = videoData.CommentsCount,
                Duration = videoData.Duration,
                PublishedAt = videoData.Date,
                Description = videoData.Text,
                Subtitles = GetSubtitleContent(videoData.Subtitles)
            };

            _logger.LogInformation($"Successfully scraped video: {videoUrl}");
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error getting run results: {ex.Message}");
            return null;
        }
    }

    private string GetSubtitleContent(List<ApifySubtitle> subtitles)
    {
        if (subtitles == null || !subtitles.Any())
            return null;

        // Prefer auto-generated English subtitles
        var subtitle = subtitles.FirstOrDefault(s => s.Language == "en" && s.Type == "auto_generated")
                     ?? subtitles.FirstOrDefault();

        // Canvert SRT into a simpler format for easier reading
        var simpleSubtitles = ConvertSrtToSimpleFormat(subtitle?.Srt);

        return simpleSubtitles;
    }

    /// <summary>
    /// Converts SRT content into a simpler format that is easeier to read.
    /// </summary>
    /// <param name="srtContent">Subtitles in SRT format (used by YouTube)</param>
    /// <returns></returns>
    private string ConvertSrtToSimpleFormat(string srtContent)
    {
        // Prepare output StringBuilder
        StringBuilder simpleOutput = new StringBuilder();

        // Split the input by double newlines to get each subtitle entry
        string[] entries = srtContent.Split(new[] { "\n\n" }, StringSplitOptions.RemoveEmptyEntries);

        foreach (string entry in entries)
        {
            // Split each entry into lines
            string[] lines = entry.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);

            // Need at least 2 lines (sequence number and timestamp)
            if (lines.Length < 2)
                continue;

            // Parse the timestamp line (should be the second line)
            string timestampLine = lines[1];

            // Extract the start time using regex
            Match match = Regex.Match(timestampLine, @"(\d+):(\d+):(\d+),\d+");

            if (!match.Success)
                continue;

            // Get the hours, minutes, and seconds as separate groups and pad if needed
            string hours = match.Groups[1].Value.PadLeft(2, '0');
            string minutes = match.Groups[2].Value.PadLeft(2, '0');
            string seconds = match.Groups[3].Value.PadLeft(2, '0');

            // Format the time with padded values
            string formattedTime = $"{hours}:{minutes}:{seconds}";

            // Get the subtitle text (can be multiple lines)
            StringBuilder textBuilder = new StringBuilder();
            for (int i = 2; i < lines.Length; i++)
            {
                // Skip empty lines or lines with just spaces
                if (string.IsNullOrWhiteSpace(lines[i]))
                    continue;

                textBuilder.Append(lines[i].Trim() + " ");
            }

            string subtitleText = textBuilder.ToString().Trim();

            // Skip entries that only contain spaces or empty text
            if (string.IsNullOrWhiteSpace(subtitleText))
                continue;

            // Add to output in the format StartTime: Phrase (with space after colon)
            simpleOutput.AppendLine($"{formattedTime}  {subtitleText}");
        }

        return simpleOutput.ToString();
    }
}

// Classes only used by Transcript Service

internal class ApifyRunResponse
{
    public ApifyRunData Data { get; set; }
}

internal class ApifyRunData
{
    public string Id { get; set; }
    public string ActId { get; set; }
    public string ActorId { get; set; }
}

internal class ApifyRunStatusResponse
{
    public ApifyRunStatusData Data { get; set; }
}

internal class ApifyRunStatusData
{
    public string Id { get; set; }
    public string Status { get; set; }
}

internal class ApifyScraperResponse
{
    public string Id { get; set; }
    public string Title { get; set; }
    public string Url { get; set; }
    public string ThumbnailUrl { get; set; }
    public int ViewCount { get; set; }
    public DateTime Date { get; set; }
    public int Likes { get; set; }
    public string ChannelName { get; set; }
    public string ChannelUrl { get; set; }
    public string ChannelId { get; set; }
    public long NumberOfSubscribers { get; set; }
    public string Duration { get; set; }
    public int CommentsCount { get; set; }
    public string Text { get; set; }
    public List<ApifySubtitle> Subtitles { get; set; }
}

internal class ApifySubtitle
{
    public string SrtUrl { get; set; }
    public string Type { get; set; }
    public string Language { get; set; }
    public string Srt { get; set; }
}
