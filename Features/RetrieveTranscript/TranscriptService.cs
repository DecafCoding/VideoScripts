using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using VideoScripts.Data;
using VideoScripts.Data.Entities;
using VideoScripts.Features.RetrieveTranscript.Models;

namespace VideoScripts.Features.RetrieveTranscript;

public class TranscriptService
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<TranscriptService> _logger;
    private readonly AppDbContext _dbContext;
    private readonly string _tokenId;

    public TranscriptService(
        IConfiguration configuration,
        ILogger<TranscriptService> logger,
        AppDbContext dbContext)
    {
        if (configuration == null)
            throw new ArgumentNullException(nameof(configuration));

        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _dbContext = dbContext ?? throw new ArgumentNullException(nameof(dbContext));

        _tokenId = configuration["Apify:TokenId"]
            ?? throw new InvalidOperationException("Apify:TokenId configuration is missing");

        _httpClient = new HttpClient();
        _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _tokenId);
    }

    /// <summary>
    /// Scrapes video transcript and immediately saves it to the database
    /// </summary>
    /// <param name="videoUrl">YouTube video URL</param>
    /// <returns>TranscriptResult with success status and video information</returns>
    public async Task<TranscriptResult> ScrapeAndSaveVideoAsync(string videoUrl)
    {
        try
        {
            _logger.LogInformation($"Starting transcript scraping for video: {videoUrl}");

            // Extract video ID from URL
            var videoId = ExtractVideoIdFromUrl(videoUrl);
            if (string.IsNullOrEmpty(videoId))
            {
                _logger.LogWarning($"Could not extract video ID from URL: {videoUrl}");
                return CreateFailedResult("Invalid YouTube URL provided");
            }

            // Check if video exists in database and already has transcript
            var existingVideo = await _dbContext.Videos
                .FirstOrDefaultAsync(v => v.YTId == videoId);

            if (existingVideo != null && !string.IsNullOrWhiteSpace(existingVideo.RawTranscript))
            {
                _logger.LogInformation($"Video {videoId} already has transcript in database");
                return CreateSuccessResult(existingVideo);
            }

            // Scrape the transcript from Apify
            var transcriptResult = await ScrapeVideoTranscriptAsync(videoUrl);

            // Check if transcript was successfully retrieved
            if (transcriptResult == null)
            {
                _logger.LogWarning($"Failed to retrieve transcript for video: {videoUrl}");
                return CreateFailedResult("Failed to retrieve transcript from external service");
            }

            // Check if transcript content is null or empty
            if (string.IsNullOrWhiteSpace(transcriptResult.Subtitles))
            {
                _logger.LogWarning($"Retrieved transcript is null or empty for video: {videoUrl}");
                return CreateFailedResult("Transcript content is empty or unavailable");
            }

            // Save transcript to database
            var savedVideo = await SaveTranscriptToDatabase(transcriptResult, existingVideo);

            if (savedVideo != null)
            {
                _logger.LogInformation($"Successfully saved transcript for video: {transcriptResult.Title}");
                return CreateSuccessResult(savedVideo, transcriptResult);
            }
            else
            {
                _logger.LogError($"Failed to save transcript to database for video: {videoUrl}");
                return CreateFailedResult("Failed to save transcript to database");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error in ScrapeAndSaveVideoAsync for {videoUrl}: {ex.Message}");
            return CreateFailedResult($"Processing failed: {ex.Message}");
        }
    }

    /// <summary>
    /// Scrapes video transcript from Apify service (original logic preserved)
    /// </summary>
    private async Task<TranscriptResult> ScrapeVideoTranscriptAsync(string videoUrl)
    {
        try
        {
            _logger.LogInformation($"Scraping YouTube video: {videoUrl}");

            // Prepare the request payload
            var requestPayload = new
            {
                downloadSubtitles = true,
                preferAutoGeneratedSubtitles = true,
                subtitlesLanguage = "en",
                startUrls = new[]
                {
                    new
                    {
                        url = videoUrl,
                        method = "GET"
                    }
                }
            };

            var content = new StringContent(
                JsonConvert.SerializeObject(requestPayload),
                Encoding.UTF8,
                "application/json");

            var runRequest = new HttpRequestMessage(HttpMethod.Post, "https://api.apify.com/v2/acts/streamers~youtube-scraper/runs");
            runRequest.Content = content;

            var runResponse = await _httpClient.SendAsync(runRequest);
            _logger.LogInformation($"Initial Apify response: {runResponse.StatusCode}");

            if (!runResponse.IsSuccessStatusCode)
            {
                _logger.LogWarning($"Failed to start scraping job: {runResponse.StatusCode}");
                return null;
            }

            // Get the run ID from the response
            var runResponseContent = await runResponse.Content.ReadAsStringAsync();
            var runData = JsonConvert.DeserializeObject<ApifyRunResponse>(runResponseContent);

            if (runData?.Data?.Id == null)
            {
                _logger.LogWarning("Failed to get run ID from Apify response");
                return null;
            }

            string runId = runData.Data.Id;
            _logger.LogInformation($"Started Apify run with ID: {runId}");

            // Poll for the run status and get results
            return await WaitForRunCompletion(runId, videoUrl);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error scraping YouTube video {videoUrl}: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// Saves transcript to database, creating or updating video entity
    /// </summary>
    private async Task<VideoEntity> SaveTranscriptToDatabase(TranscriptResult transcriptResult, VideoEntity existingVideo = null)
    {
        try
        {
            if (existingVideo != null)
            {
                // Update existing video with transcript
                existingVideo.RawTranscript = transcriptResult.Subtitles;
                existingVideo.LastModifiedAt = DateTime.UtcNow;
                existingVideo.LastModifiedBy = "TranscriptService";

                _logger.LogInformation($"Updated existing video {existingVideo.YTId} with transcript");
            }
            else
            {
                _logger.LogWarning($"Video {transcriptResult.VideoId} not found in database. Consider running YouTube processing first.");
                return null;
            }

            // Save changes immediately
            await _dbContext.SaveChangesAsync();

            return existingVideo;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error saving transcript to database: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// Extracts YouTube video ID from various URL formats
    /// </summary>
    private string ExtractVideoIdFromUrl(string url)
    {
        if (string.IsNullOrWhiteSpace(url))
            return string.Empty;

        // If it's already a clean video ID (11 characters, alphanumeric + underscore/hyphen)
        if (Regex.IsMatch(url, @"^[a-zA-Z0-9_-]{11}$"))
            return url;

        // Extract from various YouTube URL formats
        var patterns = new[]
        {
            @"(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([a-zA-Z0-9_-]{11})",
            @"youtube\.com/v/([a-zA-Z0-9_-]{11})",
            @"youtube\.com/watch\?.*v=([a-zA-Z0-9_-]{11})"
        };

        foreach (var pattern in patterns)
        {
            var match = Regex.Match(url, pattern);
            if (match.Success)
                return match.Groups[1].Value;
        }

        _logger.LogWarning($"Could not extract video ID from: {url}");
        return string.Empty;
    }

    /// <summary>
    /// Creates a successful TranscriptResult from database video entity
    /// </summary>
    private TranscriptResult CreateSuccessResult(VideoEntity video, TranscriptResult originalResult = null)
    {
        return new TranscriptResult
        {
            Success = true,
            VideoId = video.YTId,
            Title = video.Title,
            Description = video.Description,
            Subtitles = video.RawTranscript,
            ViewCount = video.ViewCount,
            LikeCount = video.LikeCount,
            CommentCount = video.CommentCount,
            Duration = video.Duration.ToString(),
            PublishedAt = video.PublishedAt,
            // Use original result for channel info if available
            ChannelId = originalResult?.ChannelId ?? string.Empty,
            ChannelName = originalResult?.ChannelName ?? string.Empty,
            ChannelUrl = originalResult?.ChannelUrl ?? string.Empty,
            SubscriberCount = originalResult?.SubscriberCount ?? 0
        };
    }

    /// <summary>
    /// Creates a failed TranscriptResult with error message
    /// </summary>
    private TranscriptResult CreateFailedResult(string errorMessage)
    {
        return new TranscriptResult
        {
            Success = false,
            ErrorMessage = errorMessage
        };
    }

    // [Rest of the original methods remain unchanged]
    private async Task<TranscriptResult> WaitForRunCompletion(string runId, string videoUrl)
    {
        const int maxAttempts = 30;
        const int delaySeconds = 5;

        for (int attempt = 0; attempt < maxAttempts; attempt++)
        {
            try
            {
                var statusUrl = $"https://api.apify.com/v2/actor-runs/{runId}";
                var statusResponse = await _httpClient.GetAsync(statusUrl);

                if (!statusResponse.IsSuccessStatusCode)
                {
                    _logger.LogWarning($"Failed to get run status: {statusResponse.StatusCode}");
                    await Task.Delay(TimeSpan.FromSeconds(delaySeconds));
                    continue;
                }

                var statusContent = await statusResponse.Content.ReadAsStringAsync();
                var statusData = JsonConvert.DeserializeObject<ApifyRunStatusResponse>(statusContent);

                _logger.LogInformation($"Run status: {statusData?.Data?.Status}, Attempt: {attempt + 1}/{maxAttempts}");

                if (statusData?.Data?.Status == "SUCCEEDED")
                {
                    return await GetRunResults(runId, videoUrl);
                }
                else if (statusData?.Data?.Status == "FAILED" || statusData?.Data?.Status == "ABORTED")
                {
                    _logger.LogWarning($"Apify run failed with status: {statusData?.Data?.Status}");
                    return null;
                }

                await Task.Delay(TimeSpan.FromSeconds(delaySeconds));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error checking run status: {ex.Message}");
                await Task.Delay(TimeSpan.FromSeconds(delaySeconds));
            }
        }

        _logger.LogWarning($"Timed out waiting for Apify run to complete after {maxAttempts} attempts");
        return null;
    }

    private async Task<TranscriptResult> GetRunResults(string runId, string videoUrl)
    {
        try
        {
            var datasetUrl = $"https://api.apify.com/v2/actor-runs/{runId}/dataset/items";
            var datasetResponse = await _httpClient.GetAsync(datasetUrl);

            if (!datasetResponse.IsSuccessStatusCode)
            {
                _logger.LogWarning($"Failed to get dataset items: {datasetResponse.StatusCode}");
                return null;
            }

            var responseContent = await datasetResponse.Content.ReadAsStringAsync();
            var scraperResponse = JsonConvert.DeserializeObject<List<ApifyScraperResponse>>(responseContent);

            if (scraperResponse == null || !scraperResponse.Any())
            {
                _logger.LogWarning($"No data returned from Apify for video URL: {videoUrl}");
                return null;
            }

            var videoData = scraperResponse[0];
            var subtitleContent = GetSubtitleContent(videoData.Subtitles);

            // Check if subtitle content is null or empty
            if (string.IsNullOrWhiteSpace(subtitleContent))
            {
                _logger.LogWarning($"No subtitle content available for video: {videoUrl}");
                return null;
            }

            var result = new TranscriptResult
            {
                Success = true,
                VideoId = videoData.Id,
                Title = videoData.Title,
                ChannelId = videoData.ChannelId,
                ChannelName = videoData.ChannelName,
                ChannelUrl = videoData.ChannelUrl,
                SubscriberCount = videoData.NumberOfSubscribers,
                ViewCount = videoData.ViewCount,
                LikeCount = videoData.Likes,
                CommentCount = videoData.CommentsCount,
                Duration = videoData.Duration,
                PublishedAt = videoData.Date,
                Description = videoData.Text,
                Subtitles = subtitleContent
            };

            _logger.LogInformation($"Successfully scraped video: {videoUrl}");
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error getting run results: {ex.Message}");
            return null;
        }
    }

    private string GetSubtitleContent(List<ApifySubtitle> subtitles)
    {
        if (subtitles == null || !subtitles.Any())
        {
            _logger.LogInformation("No subtitles available in the response");
            return null;
        }

        // Prefer auto-generated English subtitles
        var subtitle = subtitles.FirstOrDefault(s => s.Language == "en" && s.Type == "auto_generated")
                     ?? subtitles.FirstOrDefault();

        if (subtitle?.Srt == null)
        {
            _logger.LogInformation("No suitable subtitle content found");
            return null;
        }

        // Convert SRT into a simpler format for easier reading
        var simpleSubtitles = ConvertSrtToSimpleFormat(subtitle.Srt);
        return simpleSubtitles;
    }

    private string ConvertSrtToSimpleFormat(string srtContent)
    {
        if (string.IsNullOrWhiteSpace(srtContent))
            return null;

        StringBuilder simpleOutput = new StringBuilder();
        string[] entries = srtContent.Split(new[] { "\n\n" }, StringSplitOptions.RemoveEmptyEntries);

        foreach (string entry in entries)
        {
            string[] lines = entry.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);

            if (lines.Length < 2)
                continue;

            string timestampLine = lines[1];
            Match match = Regex.Match(timestampLine, @"(\d+):(\d+):(\d+),\d+");

            if (!match.Success)
                continue;

            string hours = match.Groups[1].Value.PadLeft(2, '0');
            string minutes = match.Groups[2].Value.PadLeft(2, '0');
            string seconds = match.Groups[3].Value.PadLeft(2, '0');
            string formattedTime = $"{hours}:{minutes}:{seconds}";

            StringBuilder textBuilder = new StringBuilder();
            for (int i = 2; i < lines.Length; i++)
            {
                if (string.IsNullOrWhiteSpace(lines[i]))
                    continue;

                textBuilder.Append(lines[i].Trim() + " ");
            }

            string subtitleText = textBuilder.ToString().Trim();

            if (string.IsNullOrWhiteSpace(subtitleText))
                continue;

            simpleOutput.AppendLine($"{formattedTime}  {subtitleText}");
        }

        var result = simpleOutput.ToString();
        return string.IsNullOrWhiteSpace(result) ? null : result;
    }

    public void Dispose()
    {
        _httpClient?.Dispose();
    }
}

// Supporting classes remain the same...
internal class ApifyRunResponse
{
    public ApifyRunData Data { get; set; }
}

internal class ApifyRunData
{
    public string Id { get; set; }
    public string ActId { get; set; }
    public string ActorId { get; set; }
}

internal class ApifyRunStatusResponse
{
    public ApifyRunStatusData Data { get; set; }
}

internal class ApifyRunStatusData
{
    public string Id { get; set; }
    public string Status { get; set; }
}

internal class ApifyScraperResponse
{
    public string Id { get; set; }
    public string Title { get; set; }
    public string Url { get; set; }
    public string ThumbnailUrl { get; set; }
    public int ViewCount { get; set; }
    public DateTime Date { get; set; }
    public int Likes { get; set; }
    public string ChannelName { get; set; }
    public string ChannelUrl { get; set; }
    public string ChannelId { get; set; }
    public long NumberOfSubscribers { get; set; }
    public string Duration { get; set; }
    public int CommentsCount { get; set; }
    public string Text { get; set; }
    public List<ApifySubtitle> Subtitles { get; set; }
}

internal class ApifySubtitle
{
    public string SrtUrl { get; set; }
    public string Type { get; set; }
    public string Language { get; set; }
    public string Srt { get; set; }
}